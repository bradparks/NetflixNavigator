// Generated by CoffeeScript 1.8.0
(function() {
  var defaultOptions, eventMatchers, extend, lastX, player, simulate, wiggleMouse, _ref, _ref1, _ref2;

  simulate = function(element, eventName) {
    var eventType, evt, name, oEvent, options;
    options = extend(defaultOptions, arguments[2] || {});
    oEvent = void 0;
    eventType = null;
    for (name in eventMatchers) {
      if (eventMatchers[name].test(eventName)) {
        eventType = name;
        break;
      }
    }
    if (!eventType) {
      throw new SyntaxError("Only HTMLEvents and MouseEvents interfaces are supported");
    }
    if (document.createEvent) {
      oEvent = document.createEvent(eventType);
      if (eventType === "HTMLEvents") {
        oEvent.initEvent(eventName, options.bubbles, options.cancelable);
      } else {
        oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView, options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY, options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
      }
      element.dispatchEvent(oEvent);
    } else {
      options.clientX = options.pointerX;
      options.clientY = options.pointerY;
      evt = document.createEventObject();
      oEvent = extend(evt, options);
      element.fireEvent("on" + eventName, oEvent);
    }
    return element;
  };

  window.simulate = simulate;

  console.log("added simulate");

  extend = function(destination, source) {
    var property;
    for (property in source) {
      destination[property] = source[property];
    }
    return destination;
  };

  eventMatchers = {
    HTMLEvents: /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
    MouseEvents: /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/
  };

  defaultOptions = {
    pointerX: 0,
    pointerY: 0,
    button: 0,
    ctrlKey: false,
    altKey: false,
    shiftKey: false,
    metaKey: false,
    bubbles: true,
    cancelable: true
  };

  lastX = 5;

  wiggleMouse = function(elem) {
    if (elem == null) {
      elem = $("netflix-player");
    }
    lastX = (lastX + 1) % 5;
    return simulate(elem, "mousemove", {
      pointerX: lastX,
      pointerY: 5
    });
  };

  (function($) {
    var reset;
    reset = function() {
      console.log("posting reset");
      return window.postMessage({
        filter: "NetflixMessage",
        msg: "reset"
      }, "*");
    };
    jQuery(document).on("nflxProfiles.hideOverlay", reset);
    jQuery(document).on("nflxProfiles.gateOverlay", reset);
    jQuery(document).on("nflxProfiles.switch:start", reset);
    return document.addEventListener("mouseenter", function(e) {
      return console.log("mouseenter", e);
    });
  })(jQuery);

  player = (_ref = window.netflix) != null ? (_ref1 = _ref.cadmium) != null ? (_ref2 = _ref1.objects) != null ? _ref2.videoPlayer() : void 0 : void 0 : void 0;

  window.addEventListener("message", function(e) {
    var getMovieInfo;
    if (e.data.filter === "NetflixControl") {
      switch (e.data.event) {
        case "seekTo":
          wiggleMouse();
          return player.seek(e.data.seekTo);
        case "seekDelta":
          wiggleMouse();
          return player.seek(player.getCurrentTime() + e.data.amount);
        case "pause":
          if (player.getPaused()) {
            return player.play();
          } else {
            return player.pause();
          }
          break;
        case "mute":
          return player.setMuted(!player.getMuted());
        case "adjustVolume":
          return player.setVolume(player.getVolume() + e.data.amount);
        case "setVolume":
          simulate($("netflix-player"), "hover");
          return player.setVolume(e.data.level);
      }
    } else if (e.data.filter === "NetflixNav") {
      switch (e.data.action) {
        case "enter":
          clearTimeout(getMovieInfo);
          return getMovieInfo = setTimeout(function() {
            return jQuery("#" + e.data.bob_id).mouseenter();
          }, 250);
        case "close":
          return window.close();
      }
    }
  });

}).call(this);
