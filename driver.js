// Generated by CoffeeScript 1.8.0
(function() {
  var AXES, BUTTONS, KEYS, delay, document, navigator, simulate, window,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window = this.window;

  navigator = this.window.navigator;

  document = window.document;

  BUTTONS = {
    A: 0,
    B: 1,
    X: 2,
    Y: 3,
    LEFT_SHOULDER: 4,
    RIGHT_SHOULDER: 5,
    LEFT_TRIGGER: 6,
    RIGHT_TRIGGER: 7,
    SELECT: 8,
    START: 9,
    LEFT_STICK: 10,
    RIGHT_STICK: 10,
    DPAD_UP: 12,
    DPAD_DOWN: 13,
    DPAD_LEFT: 14,
    DPAD_RIGHT: 15
  };

  AXES = {
    LEFT_HORIZONTAL: 0,
    LEFT_VERTICAL: 1,
    RIGHT_HORIZONTAL: 2,
    RIGHT_VERTICAL: 3
  };

  KEYS = {
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40
  };

  delay = function(d, f) {
    return setTimeout(f, d);
  };

  simulate = (function() {
    var defaultOptions, eventMatchers, extend;
    extend = function(destination, source) {
      var property;
      for (property in source) {
        destination[property] = source[property];
      }
      return destination;
    };
    eventMatchers = {
      HTMLEvents: /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
      MouseEvents: /^(?:click|dblclick|mouse(?:down|up|over|move|out|enter))$/
    };
    defaultOptions = {
      pointerX: 0,
      pointerY: 0,
      button: 0,
      ctrlKey: false,
      altKey: false,
      shiftKey: false,
      metaKey: false,
      bubbles: true,
      cancelable: true
    };
    return simulate = function(element, eventName) {
      var eventType, evt, name, oEvent, options;
      options = extend(defaultOptions, arguments[2] || {});
      oEvent = void 0;
      eventType = null;
      for (name in eventMatchers) {
        if (eventMatchers[name].test(eventName)) {
          eventType = name;
          break;
        }
      }
      if (!eventType) {
        throw new SyntaxError("Only HTMLEvents and MouseEvents interfaces are supported");
      }
      if (document.createEvent) {
        oEvent = document.createEvent(eventType);
        if (eventType === "HTMLEvents") {
          oEvent.initEvent(eventName, options.bubbles, options.cancelable);
        } else {
          oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView, options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY, options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
        }
        element.dispatchEvent(oEvent);
      } else {
        options.clientX = options.pointerX;
        options.clientY = options.pointerY;
        evt = document.createEventObject();
        oEvent = extend(evt, options);
        element.fireEvent("on" + eventName, oEvent);
      }
      return element;
    };
  })();

  (function($) {
    var ControllerState, GenericGridNavigator, JoystickInputController, NetflixGridNavigator, NetflixMovieDriver, OverlayMessage, script;
    ControllerState = (function() {
      ControllerState.prototype.DEADZONE = 0.40;

      ControllerState.prototype.INIT_REPEAT_DELAY = 45;

      ControllerState.prototype.REPEAT_DELAY = 7;

      ControllerState.prototype.buttonState = {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: 0,
        7: 0,
        8: 0,
        9: 0,
        10: 0,
        11: 0,
        12: 0,
        13: 0,
        14: 0,
        15: 0,
        16: 0
      };

      ControllerState.prototype.axisState = {};

      ControllerState.prototype.axisRepeating = {};

      ControllerState.prototype.axisDelay = {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: 0,
        7: 0,
        8: 0
      };

      ControllerState.prototype.timestamp = 0;

      ControllerState.prototype.isActive = false;

      ControllerState.prototype.active = {};

      function ControllerState(id) {
        this.id = id;
      }

      ControllerState.prototype.handleEvents = function(callbackObject) {
        var axis, button, gamepad, negDeadzone, posDeadzone, state, value, _, _ref, _ref1, _ref2, _results;
        gamepad = navigator.getGamepads()[this.id];
        if (gamepad.timestamp > this.timestamp || this.isActive) {
          this.timestamp = gamepad.timestamp;
          _ref = gamepad.buttons;
          for (button in _ref) {
            if (!__hasProp.call(_ref, button)) continue;
            state = _ref[button];
            if (this.buttonState[button] !== state.value) {
              this.buttonState[button] = state.value;
              callbackObject.button(parseInt(button, 10), state.value);
              this.active["b" + button] = state.value !== 0;
            }
          }
          _ref1 = gamepad.axes;
          for (axis in _ref1) {
            if (!__hasProp.call(_ref1, axis)) continue;
            value = _ref1[axis];
            posDeadzone = value > this.DEADZONE;
            negDeadzone = value < -this.DEADZONE;
            state = (posDeadzone ? 1 : (negDeadzone ? -1 : 0));
            if (this.axisState[axis] === state) {
              this.axisDelay[axis]++;
              if (state !== 0) {
                if ((this.axisRepeating[axis] && this.axisDelay[axis] > this.REPEAT_DELAY) || this.axisDelay[axis] > this.INIT_REPEAT_DELAY) {
                  this.axisRepeating[axis] = true;
                  this.axisDelay[axis] = 0;
                  callbackObject.axis(parseInt(axis, 10), value, state);
                }
              }
            } else {
              this.axisRepeating[axis] = false;
              this.axisDelay[axis] = 0;
              if (state !== 0) {
                callbackObject.axis(parseInt(axis, 10), value, state);
              }
            }
            this.axisState[axis] = state;
            this.active["ax" + axis] = state !== 0;
          }
          this.isActive = false;
          _ref2 = this.active;
          _results = [];
          for (_ in _ref2) {
            if (!__hasProp.call(_ref2, _)) continue;
            state = _ref2[_];
            if (state) {
              this.isActive = true;
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      };

      return ControllerState;

    })();
    JoystickInputController = (function() {
      function JoystickInputController() {
        var overlay;
        this.controllers = [];
        this.setupControllers();
        overlay = null;
        $((function(_this) {
          return function() {
            if (_this.controllers.length === 0) {
              overlay = new OverlayMessage();
              return overlay.show("Please press <img src='" + (chrome.extension.getURL("Xbox360_Button_A.png")) + "' /> to begin");
            }
          };
        })(this));
        window.addEventListener("gamepadconnected", (function(_this) {
          return function() {
            _this.setupControllers();
            if (overlay) {
              return overlay.hide();
            }
          };
        })(this));
        window.addEventListener("gamepaddisconnected", (function(_this) {
          return function() {
            return _this.setupControllers();
          };
        })(this));
      }

      JoystickInputController.prototype.setupControllers = function() {
        var gamepad, index, _i, _ref;
        for (index = _i = 0, _ref = navigator.getGamepads().length; 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
          gamepad = navigator.getGamepads()[index];
          if (gamepad) {
            this.controllers.push(new ControllerState(index));
          }
        }
        if (this.animFrame) {
          cancelAnimationFrame(this.animFrame);
        }
        this.animFrame = null;
        if (this.controllers.length > 0) {
          return this.loop();
        }
      };

      JoystickInputController.prototype.loop = function() {
        var controller, _i, _len, _ref;
        _ref = this.controllers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          controller = _ref[_i];
          controller.handleEvents(this);
        }
        this.booted = true;
        this.animFrame = window.requestAnimationFrame(this.loop.bind(this));
      };

      JoystickInputController.prototype.button = function(buttonId, state) {};

      JoystickInputController.prototype.axis = function(axisId, magnitude) {};

      return JoystickInputController;

    })();
    OverlayMessage = (function() {
      function OverlayMessage() {}

      OverlayMessage.prototype.getElem = function() {
        this.elem = $(".navigator-overlay");
        if (this.elem.length === 0) {
          $("body").append("<div class='navigator-overlay'><span></span></div>");
          this.elem = $(".navigator-overlay");
          return this.elem.on("click", function(e) {
            var overlay;
            overlay = $(e.target);
            return overlay.css({
              opacity: 0
            }).one("transitionend", function() {
              return overlay.hide();
            });
          });
        }
      };

      OverlayMessage.prototype.visible = function() {
        var elem;
        elem = this.getElem();
        if (!elem) {
          return false;
        }
        return elem.visible();
      };

      OverlayMessage.prototype.show = function(msg) {
        var elem;
        elem = this.getElem();
        elem.find("span").html(msg);
        return elem.show();
      };

      OverlayMessage.prototype.hide = function() {
        return this.elem.hide();
      };

      return OverlayMessage;

    })();
    GenericGridNavigator = (function(_super) {
      __extends(GenericGridNavigator, _super);

      GenericGridNavigator.prototype.ACTIVE = "grid-nav-active";

      function GenericGridNavigator(options) {
        this.currentElem = null;
        $(window).on("keydown", (function(_this) {
          return function(e) {
            switch (e.keyCode) {
              case KEYS.LEFT:
                _this.left();
                break;
              case KEYS.UP:
                _this.up();
                break;
              case KEYS.RIGHT:
                _this.right();
                break;
              case KEYS.DOWN:
                _this.down();
                break;
              default:
                return true;
            }
            return false;
          };
        })(this));
        window.addEventListener("message", (function(_this) {
          return function(e) {
            if (e.data.filter === "NetflixMessage") {
              if (e.data.msg === "reset") {
                return _this.reset();
              }
            }
          };
        })(this));
        this.options = options;
        $((function(_this) {
          return function() {
            var elementPoller;
            return elementPoller = setInterval(function() {
              _this.updateElements();
              if (_this.elements.length > 0) {
                clearInterval(elementPoller);
                return _this.activateFirstElement();
              }
            }, 200);
          };
        })(this));
        GenericGridNavigator.__super__.constructor.apply(this, arguments);
      }

      GenericGridNavigator.prototype.reset = function() {
        this.updateElements();
        return this.activateFirstElement();
      };

      GenericGridNavigator.prototype.activateFirstElement = function() {
        var def, matches, _i, _len, _ref;
        if (this.options["default"]) {
          _ref = this.options["default"];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            def = _ref[_i];
            matches = this.elements.filter(def);
            if (matches.length > 0) {
              this.activate(matches[0]);
              return;
            }
          }
        }
        return this.activate(this.elements[0]);
      };

      GenericGridNavigator.prototype.updateElements = function() {
        var f, lastPriority, selector, _i, _len, _ref, _results;
        this.elements = $([]);
        lastPriority = 1;
        _ref = this.options.selectors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          selector = _ref[_i];
          selector.priority || (selector.priority = 1);
          f = $(selector.selector).filter(":visible");
          this.elements = this.elements.add(f);
          if (selector.priority > lastPriority && f.length > 0) {
            break;
          }
          _results.push(lastPriority = selector.priority);
        }
        return _results;
      };

      GenericGridNavigator.prototype.activate = function(elem) {
        elem = $(elem);
        if (!(elem.length > 0)) {
          return;
        }
        if (this.currentElem) {
          $(this.currentElem).removeClass(this.ACTIVE);
        }
        elem.addClass(this.ACTIVE);
        this.currentElem = elem;
        this.focus(elem);
        if (this.isFixed(elem)) {
          return window.scrollTo(0, 0);
        } else {
          return $(window).scrollTo(elem, {
            duration: 150,
            offset: {
              left: 0,
              top: -200
            }
          });
        }
      };

      GenericGridNavigator.prototype.isFixed = function(elem) {
        var e, _i, _len, _ref;
        if (elem.css("position") === "fixed") {
          return true;
        }
        _ref = elem.parents();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          if ($(e).css("position") === "fixed") {
            return true;
          }
        }
        return false;
      };

      GenericGridNavigator.prototype.focus = function(elem) {
        var anchor;
        anchor = elem.find("a").get(0) || elem;
        anchor.focus();
        return simulate(elem.get(0), "mouseover");
      };

      GenericGridNavigator.prototype.button = function(buttonId, state) {
        if (!this.booted) {
          return;
        }
        if (state === 1) {
          switch (buttonId) {
            case BUTTONS.A:
              return this.select();
            case BUTTONS.B:
              return this.cancel();
            case BUTTONS.Y:
              return this.info();
            case BUTTONS.DPAD_UP:
              return this.up();
            case BUTTONS.DPAD_DOWN:
              return this.down();
            case BUTTONS.DPAD_LEFT:
              return this.left();
            case BUTTONS.DPAD_RIGHT:
              return this.right();
            case BUTTONS.LEFT_SHOULDER:
              return this.left(5);
            case BUTTONS.RIGHT_SHOULDER:
              return this.right(5);
          }
        }
      };

      GenericGridNavigator.prototype.select = function() {
        return this.clickFocus();
      };

      GenericGridNavigator.prototype.cancel = function() {
        if (document.activeElement && document.activeElement.tagName === "INPUT") {
          this.blurFocus();
          return true;
        } else {
          return false;
        }
      };

      GenericGridNavigator.prototype.info = function() {};

      GenericGridNavigator.prototype.clickFocus = function() {
        var elem, selector, _i, _len, _ref;
        elem = this.currentElem;
        _ref = this.options.selectors;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          selector = _ref[_i];
          if (elem.is(selector.selector) && selector.click) {
            elem = elem.find(selector.click);
            break;
          }
        }
        simulate($(elem).get(0), "click");
        return true;
      };

      GenericGridNavigator.prototype.blurFocus = function() {
        document.activeElement.blur();
        return true;
      };

      GenericGridNavigator.prototype.axis = function(axisId, magnitude, state) {
        switch (axisId) {
          case AXES.LEFT_HORIZONTAL:
            if (magnitude < 0) {
              return this.left();
            } else {
              return this.right();
            }
            break;
          case AXES.LEFT_VERTICAL:
            if (magnitude < 0) {
              return this.up();
            } else {
              return this.down();
            }
        }
      };

      GenericGridNavigator.prototype.left = function(times) {
        if (times == null) {
          times = 1;
        }
        this.multiNavigate(-1, 0, times);
        return true;
      };

      GenericGridNavigator.prototype.up = function(times) {
        if (times == null) {
          times = 1;
        }
        this.multiNavigate(0, -1, times);
        return true;
      };

      GenericGridNavigator.prototype.down = function(times) {
        if (times == null) {
          times = 1;
        }
        this.multiNavigate(0, 1, times);
        return true;
      };

      GenericGridNavigator.prototype.right = function(times) {
        if (times == null) {
          times = 1;
        }
        this.multiNavigate(1, 0, times);
        return true;
      };

      GenericGridNavigator.prototype.coordsFor = function(x, y, elem) {
        var rect;
        rect = elem.getBoundingClientRect();
        rect.top += window.scrollY;
        rect.left += window.scrollX;
        if (x === 1) {
          return [rect.left, rect.top + rect.height / 2, rect];
        } else if (x === -1) {
          return [rect.right, rect.top + rect.height / 2, rect];
        } else if (y === 1) {
          return [rect.left + rect.width / 2, rect.top, rect];
        } else if (y === -1) {
          return [rect.left + rect.width / 2, rect.bottom, rect];
        } else if (x === 0 && y === 0) {
          return [rect.left + rect.width / 2, rect.top + rect.height / 2, rect];
        }
      };

      GenericGridNavigator.prototype.multiNavigate = function(x, y, times) {
        var i, reference, _i;
        reference = this.currentElem;
        for (i = _i = 1; 1 <= times ? _i <= times : _i >= times; i = 1 <= times ? ++_i : --_i) {
          reference = $(this.navigate(x, y, reference));
          if (reference.length === 0) {
            break;
          }
        }
        this.activate(reference);
        return window.requestAnimationFrame((function(_this) {
          return function() {
            return _this.updateElements();
          };
        })(this));
      };

      GenericGridNavigator.prototype.navigate = function(x, y, reference) {
        var a_dx, a_dy, bestOption, bestScore, dx, dy, elem, elemX, isValid, origX, ox, oy, score, wrongAxisPenalty, _i, _len, _origRect, _rect, _ref, _ref1, _ref2, _x, _y;
        bestOption = null;
        if (reference && reference.length > 0) {
          _ref = this.coordsFor(-x, -y, reference[0]), ox = _ref[0], oy = _ref[1], _origRect = _ref[2];
          bestScore = null;
          _ref1 = this.elements;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            elem = _ref1[_i];
            _ref2 = this.coordsFor(x, y, elem), _x = _ref2[0], _y = _ref2[1], _rect = _ref2[2];
            dx = _x - ox;
            dy = _y - oy;
            a_dx = Math.abs(dx);
            a_dy = Math.abs(dy);
            if (x !== 0) {
              origX = _origRect.top + _origRect.height / 2;
              elemX = _rect.top + _rect.height / 2;
              isValid = elemX > origX - _origRect.height && elemX < origX + _origRect.height;
            } else {
              isValid = true;
            }
            if (!isValid) {
              continue;
            }
            wrongAxisPenalty = 1;
            if (x === 1 && dx >= 0) {
              score = (dx * 1) + (a_dy * wrongAxisPenalty);
            } else if (x === -1 && dx <= 0) {
              score = (dx * -1) + (a_dy * wrongAxisPenalty);
            } else if (y === 1 && dy >= 0) {
              score = (dy * 1) + (a_dx * wrongAxisPenalty);
            } else if (y === -1 && dy <= 0) {
              score = (dy * -1) + (a_dx * wrongAxisPenalty);
            } else {
              score = null;
            }
            if (score !== null) {
              if (bestScore === null || score < bestScore) {
                bestScore = score;
                bestOption = elem;
              }
            }
          }
        }
        return bestOption;
      };

      return GenericGridNavigator;

    })(JoystickInputController);
    NetflixGridNavigator = (function(_super) {
      __extends(NetflixGridNavigator, _super);

      function NetflixGridNavigator() {
        return NetflixGridNavigator.__super__.constructor.apply(this, arguments);
      }

      NetflixGridNavigator.prototype.info = function() {
        var bits;
        if (this.currentElem.is(".agMovie")) {
          bits = this.currentElem.find("a").data("uitrack").split(",");
          return window.location.href = "https://www.netflix.com/WiMovie/" + bits[0] + "?trkid=" + bits[1];
        }
      };

      NetflixGridNavigator.prototype.cancel = function() {
        if (NetflixGridNavigator.__super__.cancel.apply(this, arguments)) {
          return;
        }
        if (window.history.length <= 1) {
          return chrome.runtime.sendMessage('closetab');
        } else {
          return window.history.go(-1);
        }
      };

      NetflixGridNavigator.prototype.navigate = function(x, y, ref) {
        $(".sliderButton").remove();
        return NetflixGridNavigator.__super__.navigate.call(this, x, y, ref);
      };

      NetflixGridNavigator.prototype.activate = function(elem) {
        var rect;
        elem = $(elem);
        NetflixGridNavigator.__super__.activate.call(this, elem);
        if (elem.length > 0) {
          window.postMessage({
            filter: "NetflixNav",
            bob_id: elem.find("a.bobbable").attr("id"),
            action: "enter"
          }, "*");
          rect = elem[0].getBoundingClientRect();
          if (rect.right > document.body.clientWidth * 0.9) {
            return elem.parents(".slider").scrollTo(elem, {
              duration: 150,
              offset: {
                left: -(document.body.clientWidth * 0.9) + rect.width,
                top: 0
              }
            });
          } else if (rect.left < document.body.clientWidth * 0.1) {
            return elem.parents(".slider").scrollTo(elem, {
              duration: 150,
              offset: {
                left: -(document.body.clientWidth * 0.1),
                top: 0
              }
            });
          }
        }
      };

      return NetflixGridNavigator;

    })(GenericGridNavigator);
    NetflixMovieDriver = (function(_super) {
      __extends(NetflixMovieDriver, _super);

      NetflixMovieDriver.prototype.ACTIVE = "controls-nav-active";

      function NetflixMovieDriver(options) {
        NetflixMovieDriver.__super__.constructor.call(this, options);
      }

      NetflixMovieDriver.prototype.activate = function(elem) {
        elem = $(elem);
        NetflixMovieDriver.__super__.activate.call(this, elem);
        return delay(0, this.updateElements());
      };

      NetflixMovieDriver.prototype.message = function(msg, args) {
        if (args == null) {
          args = {};
        }
        args.filter = "NetflixControl";
        args.event = msg;
        return window.postMessage(args, "*");
      };

      NetflixMovieDriver.prototype.axis = function(axisId, magnitude, state) {
        $(".player-controls-wrapper").removeClass("display-none opacity-transparent");
        this.updateElements();
        if (axisId === AXES.RIGHT_HORIZONTAL) {
          if (magnitude < 0) {
            this.message("seekDelta", {
              amount: -30000
            });
          }
          if (magnitude > 0) {
            this.message("seekDelta", {
              amount: 30000
            });
          }
        }
        return NetflixMovieDriver.__super__.axis.call(this, axisId, magnitude, state);
      };

      NetflixMovieDriver.prototype.button = function(buttonId, state) {
        if (state === 1) {
          switch (buttonId) {
            case BUTTONS.START:
              return this.message("pause");
            case BUTTONS.B:
              return window.history.back();
            case BUTTONS.A:
              return $(".postplay-still-container").click();
            case BUTTONS.DPAD_UP:
              return this.message("adjustVolume", {
                amount: 0.15
              });
            case BUTTONS.DPAD_DOWN:
              return this.message("adjustVolume", {
                amount: -0.15
              });
            case BUTTONS.DPAD_LEFT:
              return this.message("seekDelta", {
                amount: -5000
              });
            case BUTTONS.DPAD_RIGHT:
              return this.message("seekDelta", {
                amount: 5000
              });
            case BUTTONS.DPAD_SELECT:
              return this.message("mute");
          }
        }
      };

      return NetflixMovieDriver;

    })(GenericGridNavigator);
    script = document.createElement("script");
    script.src = chrome.extension.getURL("controller.js");
    document.head.appendChild(script);
    if (window.location.pathname.match("/WiPlayer")) {
      return new NetflixMovieDriver({
        selectors: {
          selector: ".player-control-button:not(.player-hidden), .player-active .episode-list-item, .player-active .player-audio-tracks li, .player-active .player-timed-text-tracks li"
        }
      });
    } else {
      return new NetflixGridNavigator({
        "default": ["li.profile", ".displayPagePlayable", ".agMovie"],
        selectors: [
          {
            selector: ".profilesGate li.profile, ul.profiles li",
            click: "span",
            priority: 10
          }, {
            selector: "li.nav-item .content a, #searchTab a"
          }, {
            selector: ".displayPagePlayable",
            click: "a"
          }, {
            selector: "#seasonSelector #selectorButton",
            refresh: true,
            priority: 5
          }, {
            selector: ".episodeList li"
          }, {
            selector: "div.agMovie",
            priority: 1
          }
        ]
      });
    }
  })(window.jQuery);

}).call(this);
